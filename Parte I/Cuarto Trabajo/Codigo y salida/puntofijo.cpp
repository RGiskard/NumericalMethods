#include<iostream>
#include <math.h>
#include <iostream>
#include <math.h>
#include <map>
#include <tuple> 
#include <fstream>
#include <cstdlib>
using namespace std;
typedef unsigned int int64;
typedef map<int64,tuple<double,double>> estructura;
void generarPdf(int64 iter,int64 maxIter,estructura tabla,double err);

using namespace std;

double f(double x)
{
	return pow(x,2)-2;
}

double g(double x)
{
	return (2-x*x)/10 + x;
}



double PuntoFijo( double (g)(double),double r0, double tol ,double maxIter){
	
	double r1= g(r0);
	int64 i = 1;
	estructura tabla;
	double err= (fabs(r1-r0) / fabs(r1));
	while( err > tol  && i < maxIter )
	{
		tabla[i]=tuple<double,double>(r0,err);
		r0 = r1;
		r1= g(r0);
		err= (fabs(r1-r0) / fabs(r1));
		i++;
	}
	generarPdf(i,maxIter,tabla,err);
	return r0;
}

void generarPdf(int64 iter,int64 maxIter,estructura tabla,double err)
{
	string FileName="metodoPuntoFijo.tex";
	ofstream salida(FileName.c_str());
	salida<<"\\documentclass[a4paper,10pt]{article}"<<endl;
	salida<<"\\usepackage[utf8]{inputenc}"<<endl;
	salida<<"\\title{}"<<endl;
	salida<<"\\author{Table generated by R\\'omulo Walter Condori Bustincio}"<<endl;
	salida<<"\\begin{document}"<<endl;
	salida<<"\\maketitle"<<endl;
	salida<<"Con un total de "<<iter<<" de "<<maxIter<<" iteraciones permitidas, se obtuvo la siguiente tabla:"<<endl; 
	salida<<"\\begin{center}"<<endl;
	salida<<"\\begin{tabular}{|c|c|c|}"<<endl;
	salida<<"\\hline"<<endl;
	salida<<"Iteraci\\'on&$r$&$f(r)$\\\\"<<endl;
	salida<<"\\hline"<<endl;
	///Conseguir datos
	estructura::iterator it;
	for(it=tabla.begin();it!=tabla.end();it++)
	{
		salida<<(*it).first<<"&"<<get<0>((*it).second)<<"&"<<get<1>((*it).second)<<"\\\\"<<endl;
	}	
	it--;
	salida<<"\\hline"<<endl;
	salida<<"\\end{tabular}"<<endl;
	salida<<"\\end{center}"<<endl;
	salida<<"Donde el valor de $r$ aproximado es "<<get<0>((*it).second);
	salida<<" con un error relativo de: "<<err<<endl;
	salida<<"\\end{document}"<<endl;
	
	string comand="pdflatex "+FileName;
	system(comand.c_str());
}	

int main()
{
	PuntoFijo(g,2,0.000001,200);
	return 0;
}	

